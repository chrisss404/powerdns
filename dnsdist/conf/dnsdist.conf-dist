
function file_exists(name)
   local file = io.open(name, "r")
   if file ~= nil then
       io.close(file)
       return true
   else
       return false
   end
end

-- Expose commandline console
controlSocket('127.0.0.1:5199')
setKey("YjsDePSLCZxErIOmBSd117W8V92ZOMbqlnRVnWomIjw=")

-- Set ACLs
setACL('0.0.0.0/0')

-- Listen for plain DNS queries
local plain_dns = os.getenv("DNSDIST_PLAIN")
if plain_dns ~= nil and string.lower(plain_dns) == "yes" then
    setLocal("0.0.0.0:53")
end

-- Listen for DNSCrypt queries
local dnscrypt = os.getenv("DNSDIST_DNSCRYPT")
if dnscrypt ~= nil and string.lower(dnscrypt) == "yes" then
    -- Create DNSCrypt keys in case of absence
    if not file_exists("/var/lib/dnsdist/resolver.cert") or not file_exists("/var/lib/dnsdist/resolver.key") then
        infolog("Generate new DNSCrypt keys.")
        generateDNSCryptProviderKeys("/var/lib/dnsdist/providerPublic.key", "/var/lib/dnsdist/providerPrivate.key")
        generateDNSCryptCertificate("/var/lib/dnsdist/providerPrivate.key", "/var/lib/dnsdist/resolver.cert", "/var/lib/dnsdist/resolver.key", os.date('%Y%m%d', os.time()), os.time(), os.time() + (365 * 86400))
    end

    local dnscrypt_provider_name = os.getenv("DNSDIST_DNSCRYPT_PROVIDER_NAME")
    if dnscrypt_provider_name == nil then
        dnscrypt_provider_name = "2.dnscrypt-cert.example.com"
    end

    addDNSCryptBind("0.0.0.0:8443", dnscrypt_provider_name, "/var/lib/dnsdist/resolver.cert", "/var/lib/dnsdist/resolver.key", {doTCP=true})
end

-- Listen for DNS-over-HTTPS queries
local doh = os.getenv("DNSDIST_DNS_OVER_HTTPS")
if doh ~= nil and string.lower(doh) == "yes" then
    local doh_domain = os.getenv("DNSDIST_DNS_OVER_HTTPS_DOMAIN")
    local doh_path = os.getenv("DNSDIST_DNS_OVER_HTTPS_PATH")
    if doh_path == nil then
        doh_path = "/dns-query"
    end

    local doh_fullchain = "/etc/nginx/certs/" .. doh_domain .. "/fullchain.pem"
    local doh_key = "/etc/nginx/certs/" .. doh_domain .. "/key.pem"

    if file_exists(doh_fullchain) and file_exists(doh_key) then
        addDOHLocal("0.0.0.0:443", doh_fullchain, doh_key, { doh_path })
    else
        errlog("Fatal error: Unable to find certificates for the DoH context on 0.0.0.0:443.")
    end
end

-- Listen for DNS-over-TLS queries
local dot = os.getenv("DNSDIST_DNS_OVER_TLS")
if dot ~= nil and string.lower(dot) == "yes" then
    local dot_domain = os.getenv("DNSDIST_DNS_OVER_TLS_DOMAIN")
    local dot_fullchain = "/etc/nginx/certs/" .. dot_domain .. "/fullchain.pem"
    local dot_key = "/etc/nginx/certs/" .. dot_domain .. "/key.pem"

    if file_exists(dot_fullchain) and file_exists(dot_key) then
        addTLSLocal("0.0.0.0:853", dot_fullchain, dot_key)
    else
        errlog("Fatal error: Unable to find certificates for the TLS context on 0.0.0.0:853.")
    end
end

-- Start webserver
local start_webserver = os.getenv("DNSDIST_WEBSERVER")
if start_webserver ~= nil and string.lower(start_webserver) == "yes" then
    webserver("0.0.0.0:8083")
    setWebserverConfig({password="pdns", apiKey="pdns", acl="0.0.0.0/0"})
end

-- Log queries to stdout
local quiet = os.getenv("DNSDIST_QUIET")
if quiet == nil or string.lower(quiet) ~= "yes" then
    addAction(AllRule(), LogAction('/dev/stdout', false, false, false))
end

-- Drop all queries for class CHAOS
addAction(QClassRule(DNSClass.CHAOS), DropAction())

-- Delay queries if exceeding 100 queries per second per ip
addAction(MaxQPSIPRule(100), DelayAction(100))

-- Drop queries if exceeding 500 queries per second per ip
addAction(MaxQPSIPRule(500), DropAction())

-- Cache responses
local packet_cache = newPacketCache(10000)
getPool(""):setCache(packet_cache)

-- Include additional configurations
includeDirectory("/etc/dnsdist/conf.d")
